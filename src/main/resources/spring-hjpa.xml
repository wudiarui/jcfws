<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                          http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
                          http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.0.xsd
                          http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

    <bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="databasePlatform" value="org.hibernate.dialect.MySQL57InnoDBDialect"/>
        <property name="generateDdl" value="false"/>
        <property name="showSql" value="true"/>
        <property name="database" value="MYSQL" />
    </bean>

    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" />
        <property name="packagesToScan">
            <array>
                <value>org.jerry.frameworks.base.entity.jpa</value>
                <value>org.jerry.frameworks.system.entity.jpa</value>
            </array>
        </property>
        <!--Jpa方言-->
        <property name="jpaDialect">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect"/>
        </property>
        <property name="jpaPropertyMap">
            <map>
                <entry key="show_sql" value="true" />
                <!-- 使用自定义的validator进行jsr303验证 -->
                <entry key="javax.persistence.validation.factory" value-ref="validator" />
                <!-- 禁用验证 -->
                <entry key="javax.persistence.validation.mode" value="NONE"/>
                <!-- 只扫描class文件，不扫描hbm，默认两个都搜索 -->
                <entry key="hibernate.archive.autodetection" value="class"/>
                <!-- 不检查@NamedQuery -->
                <entry key="hibernate.query.startup_check" value="false"/>
                <!-- 一些hibernate的配置 -->
                <!-- 查询中关键字替代数值 -->
                <entry key="hibernate.query.substitutions" value="${hibernate.query.substitutions}" />
                <!--为Hibernate关联的批量抓取设置默认数量.取值 建议的取值为4, 8, 和16-->
                <entry key="hibernate.default_batch_fetch_size" value="${hibernate.default_batch_fetch_size}"/>
                <!--在log和console中打印出更漂亮的sql.取值true | false-->
                <entry key="hibernate.format_sql " value="${hibernate.format_sql}" />
                <!--为单向关联(一对一, 多对一)的外连接抓取（outer join fetch）树设置最大深度. 值为0意味着将关闭默认的外连接抓取.取值 建议在0到3之间取值-->
                <entry key="hibernate.max_fetch_depth" value="${hibernate.max_fetch_depth}"/>
                <!--如果开启, Hibernate将收集有助于性能调节的统计数据.取值true | false-->
                <entry key="hibernate.generate_statistics" value="${hibernate.generate_statistics}"/>
                <!--字节码反射优化-->
                <entry key="hibernate.bytecode.use_reflection_optimizer" value="${hibernate.bytecode.use_reflection_optimizer}"/>

                <!--能用来完全禁止使用二级缓存. 对那些在类的映射定义中指定<cache>的类，会默认开启二级缓存.取值true|false-->
                <entry key="hibernate.cache.use_second_level_cache" value="${hibernate.cache.use_second_level_cache}"/>
                <!--允许查询缓存, 个别查询仍然需要被设置为可缓存的.取值true|false-->
                <entry key="hibernate.cache.use_query_cache" value="${hibernate.cache.use_query_cache}"/>
                <!--自定义的实现QueryCache接口的类名, 默认为内建的StandardQueryCache.取值classname.of.QueryCache-->
                <entry key="hibernate.cache.region.factory_class" value="${hibernate.cache.region.factory_class}"/>
                <!--指定cache的配置文件-->
                <entry key="net.sf.ehcache.configurationResourceName" value="${net.sf.ehcache.configurationResourceName}"/>
                <!--强制Hibernate以更人性化的格式将数据存入二级缓存.取值true|false-->
                <entry key="hibernate.cache.use_structured_entries" value="${hibernate.cache.use_structured_entries}"/>
            </map>
            <!--<props>-->
                <!--<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>-->
                <!--<prop key="hibernate.cache.provider_class">org.hibernate.cache.NoCacheProvider</prop>-->
                <!--<prop key="show_sql">false</prop>-->
                <!--<prop key="hibernate.format_sql">false</prop>-->
                <!--<prop key="hibernate.hbm2ddl.auto">validate</prop>-->
            <!--</props>-->
        </property>
    </bean>

    <!--
        spring data jpa repository
        base-package:扫描的包
        repository-impl-postfix:仓库自定义实现类型的后缀  自动扫描并添加到接口的实现
        factory-class 仓库接口的实现工厂
    -->
    <jpa:repositories base-package="org.jerry.frameworks.**.repository"
                      repository-impl-postfix="Impl"
                      factory-class="org.jerry.frameworks.base.repository.support.SimpleBaseRepositoryFactoryBean"
                      entity-manager-factory-ref="entityManagerFactory"
                      transaction-manager-ref="transactionManager">

    </jpa:repositories>

    <!-- 以下 validator  ConversionService 在使用 mvc:annotation-driven 会 自动注册-->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
        <!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>

    <!--事务管理器配置-->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="doReweight" propagation="REQUIRES_NEW"/>
            <tx:method name="doClear*" propagation="REQUIRES_NEW"/>
            <tx:method name="doSend*" propagation="REQUIRES_NEW"/>
            <tx:method name="doBatchSave*" propagation="REQUIRES_NEW"/>

            <!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到-->
            <tx:method name="get*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="count*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="find*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="list*" propagation="REQUIRED" read-only="true"/>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!--事务切面-->
    <aop:config expose-proxy="true" proxy-target-class="true">
        <aop:pointcut id="txPointcut" expression="execution(* org.jerry..biz..*+.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>

    <!--设置查询字符串转换器的conversion service-->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod"
                  value="org.jerry.frameworks.base.entity.search.utils.SearchableConvertUtils.setConversionService"/>
        <property name="arguments" ref="conversionService"/>
    </bean>

    <!--设置BaseRepositoryImplHelper辅助类所需的entityManagerFactory-->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod"
                  value="org.jerry.frameworks.base.repository.RepositoryHelper.setEntityManagerFactory"/>
        <property name="arguments" ref="entityManagerFactory"/>
    </bean>
</beans>